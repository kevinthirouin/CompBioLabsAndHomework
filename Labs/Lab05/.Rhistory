DataVector[is.nan(DataVector)] <- 0
DataVector[is.na(DataVector)] <- NaN
DataVector[is.na(DataVector)] <- NaN
#1) Create variable x, and if-else statement to check if value is larger than 5
x <- 10
if(x > 5) {
print("variable x is greater than 5")
} else {
print("variable x is less than 5")
}
ExampleData <- read.csv(file.choose()) #Import ExampleData.csv file
str(ExampleData) #check structure of data -- data frame of one variable
DataVector <- ExampleData$x #move data into a vector for manipulation
ExampleData <- read.csv(file.choose()) #Import ExampleData.csv file
str(ExampleData) #check structure of data -- data frame of one variable
DataVector <- ExampleData$x #move data into a vector for manipulation
for(i in 1:length(DataVector)) {
if(DataVector[i] >= 0) {
print(DataVector[i])
} else {
DataVector[i] <- NA
}
}
DataVector[is.na(DataVector)] <- NaN
DataVector[is.nan(DataVector)] <- 0
##2d) determine how many values in DataVector fall between 50 and 100
vals50to100 <- which(DataVector >= 50, DataVector <= 100)
vals50to100
length(vals50to100)
##2e) create new vector of those values (50-100) from 2d
FiftyToOneHundred <- length(vals50to100)
##2d) determine how many values in DataVector fall between 50 and 100
vals50to100 <- which(DataVector >= 50, DataVector <= 100)
vals50to100
##2e) create new vector of those values (50-100) from 2d
FiftyToOneHundred <- DataVector[vals50to100]
FiftyToOneHundred
##2f) create a .csv file of the above vector FiftyToOneHundred
write.csv(x = FiftyToOneHundred, file = "FiftyToOneHundred.csv")
#3) Import data on CO2 emmisions, and read about the dataset to answer question 3
C02data <- read.csv(file.choose())
#3) Import data on CO2 emmisions, and read about the dataset to answer question 3
C02data <- read.csv(file.choose())
head(C02data)
#3) Import data on CO2 emmisions, and read about the dataset to answer question 3
CO2data <- read.csv(file.choose())
head(CO2data)
##3a) find the first year that "Gas" emmisions were non-zero
gasVector <- CO2data$Gas
gasVector
which(gasVector > 0)
CO2data[135,]
which(gasVector > 0, <0) #list indices in gasVector which correspond to non-zero values in order
which(gasVector > 0, gasVector <0) #list indices in gasVector which correspond to non-zero values in order
##3b) report the years in which total emmisions were between 200 and 300 million metric tons of carbon
head(CO2data)
rangeTotal200to300 <- which(CO2data$Total >=200, CO2data$Total <= 300)
rangeTotal200to300
rangeTotal200to300 <- CO2data$Year(which(CO2data$Total >=200, CO2data$Total <= 300))
Total200to300 <- (which(CO2data$Total >=200, CO2data$Total <= 300))
Total200to300
CO2data[129,]
CO2data[263,]
Total200to300 <- which(CO2data$Total >=200, CO2data$Total <= 300)
Total200to300
CO2data[129,]
CO2data[263,]
Total200to300 <- which(CO2data$Total >=200, CO2data$Total <= 300)
Total200to300
CO2data[263,]
Total200to300 <- which(CO2data$Total >=200, <= 300)
Total200to300 <- which(CO2data$Total >=200, =< 300)
Total200to300 <- which(CO2data$Total >=200 & =< 300)
Total200to300 <- which(CO2data$Total >=200 & < 300)
Total200to300 <- which(CO2data$Total >=200 && <= 300)
##3a) find the first year that "Gas" emmisions were non-zero
gasVector <- CO2data$Gas
which(gasVector > 0) #list indices in gasVector which correspond to non-zero (greater than zero) values in order
CO2data[135,] #the first non-zero value from the which() function above was the 135th value, which corresponds to the 135th row in the "CO2data" dataframe
##3b) report the years in which "Total" emmisions were between 200 and 300 million metric tons of carbon
head(CO2data)
CO2data
##3b) report the years in which "Total" emmisions were between 200 and 300 million metric tons of carbon
head(CO2data)
Total200to300 <- which(CO2data$Total >=200, CO2data$Total <= 300)
Total200to300
CO2data[263,]
CO2data[129,]
CO2data[263,]
CO2data[262,]
CO2data[200,]
CO2data[130,]
Total200to300 <- which(CO2data$Total >= 200, CO2data$Total <= 300)
Total200to300
Total200to300 <- which(CO2data$Total >= 200 CO2data$Total <= 300)
Total200to300 <- which(Total >= 200, <= 300, data = CO2data)
Total200to300 <- which(Total <= 300, >= 200, data = CO2data)
Total200to300 <- which(Total >= 200, <= 300, data = CO2data)
Total200to300
##3b) report the years in which "Total" emmisions were between 200 and 300 million metric tons of carbon
head(CO2data)
##3b) report the years in which "Total" emmisions were between 200 and 300 million metric tons of carbon
head(CO2data)
Total <- CO2data[[Total]]
Total <- CO2data[["Total"]]
Total
nrow(CO2data)
FiftyToOneHundred
##3a) find the first year that "Gas" emmisions were non-zero
gasVector <- CO2data$Gas
which(gasVector > 0) #list indices in gasVector which correspond to non-zero (greater than zero) values in order
CO2data[135,] #the first non-zero value from the which() function above was the 135th value, which corresponds to the 135th row in the "CO2data" dataframe
##3b) report the years in which "Total" emmisions were between 200 and 300 million metric tons of carbon
head(CO2data)
Total <- CO2data[["Total"]]
Total
##3b) report the years in which "Total" emmisions were between 200 and 300 million metric tons of carbon
head(CO2data)
Total <- CO2data[["Total"]]
totalSubset <- which(Total >= 200, Total <= 300)
totalSubset
##3b) report the years in which "Total" emmisions were between 200 and 300 million metric tons of carbon
head(CO2data)
Total <- CO2data[["Total"]]
totalSubset <- which(Total >= 200, Total <= 300)
totalSubset
##3b) report the years in which "Total" emmisions were between 200 and 300 million metric tons of carbon
head(CO2data)
totalSubset <- which(CO2data$Total >= 200, CO2data$Total <= 300)
totalSubset
nrow(CO2data)
nrow(totalSubset)
length(totalSubset)
totalSubset
263 - 129
length(totalSubset)
length(totalSubset)
print(totalSubset)
print(totalSubset)
length(totalSubset) #double check that this isn't the entire dataset -- it was incorrect during a previous iteration of code
totalSubset
length(totalSubset) #double check that this isn't the entire dataset -- it was incorrect during a previous iteration of code
length(totalSubset) #double check that this isn't the entire dataset -- it was incorrect during a previous iteration of code
totalSubset <- which(CO2data$Total >= 200, CO2data$Total <= 300)
length(totalSubset) #double check that this isn't the entire dataset -- it was incorrect during a previous iteration of code
##3b) report the years in which "Total" emmisions were between 200 and 300 million metric tons of carbon
head(CO2data)
Total <- CO2data[["Total"]]
totalSubset <- which(CO2data$Total >= 200, CO2data$Total <= 300)
length(totalSubset) #double check that this isn't the entire dataset -- it was incorrect during a previous iteration of code
head(CO2data)
totalSubset <- which(CO2data$Total >= 200, CO2data$Total <= 300)
length(totalSubset) #double check that this isn't the entire dataset -- it was incorrect during a previous iteration of code
totalSubset
totalSubset <- which(CO2data$Total >= 200, CO2data$Total <= 300)
length(totalSubset) #double check that this isn't the entire dataset -- it was incorrect during a previous iteration of code
Total <- CO2data[["Total"]]
##3b) report the years in which "Total" emmisions were between 200 and 300 million metric tons of carbon
head(CO2data)
totalSubset
CO2data[129,]
CO2data[129:263]
CO2data[[Year]]
##3b) report the years in which "Total" emmisions were between 200 and 300 million metric tons of carbon
head(CO2data)
CO2data[[1]]
##3b) report the years in which "Total" emmisions were between 200 and 300 million metric tons of carbon
head(CO2data)
totalSubset <- which(CO2data$Total >= 200, CO2data$Total <= 300)
totalSubset
totalSubset
yearSubset <- CO2data$Year, Co2data$Total >= 200, CO2data <= 300)
yearSubset <- CO2data$Year[129:263]
yearSubset
length(yearSubset)
yearSubset
head(yearSubset)
tail(yearSubset)
#define parameter values
totalGenerations <- 1000
initPrey <- 100 	# initial prey abundance at time t = 1
initPred <- 10		# initial predator abundance at time t = 1
a <- 0.01 		# attack rate
r <- 0.2 		# growth rate of prey
m <- 0.05 		# mortality rate of predators
k <- 0.1 		# conversion constant of prey into predators
#2)
##create time vector and make two additional vectors for storage of results
t <- seq(1, totalGenerations)
#define parameters
base <- 10
height <- 9
#write function
triangleArea <- function(base, height) {
area <- 0.5 * base * height
return(area)
}
triangleArea(base, height)
10 * 9 * 0.5
a <- 5
b <- 8
triangleArea(a, b)
5 * 8 * 0.5
##2a)
myAbs <- function(x) {
x_sq <- x^2
absolute <- sqrt(x_sq)
return(absolute)
}
myAbs(-1.5)
myAbs(-1.5) #check that the function works as intended with a test
##2b) revise the above function to work on all elements of a vector
myAbs2 <- function(myVector) {
if(myVector[i] < 0){
myVector_squared <- myVector[i]^2
absolute <- sqrt(myVector_squared)
}
return(absolute)
}
vec1 <- seq(-6:6)
myAbs2(vec1)
##2b) revise the above function to work on all elements of a vector
vec1 <- c(1.1, 2, 0, -4.3, 9, -12)
#write function
myAbs2 <- function(myVector) {
for(i in length:myVector) {
if(myVector[i] < 0){
myVector_squared <- myVector[i]^2
absolute <- sqrt(myVector_squared)
}
}
return(absolute)
}
myAbs2(vec1)
##2b) revise the above function to work on all elements of a vector
vec1 <- c(1.1, 2, 0, -4.3, 9, -12) #given vector to use new function on
#write function
myAbs2 <- function(myVector) {
for(i in length:myVector) {
if(myVector[i] < 0){
myVector_squared <- myVector[i]^2
absolute <- sqrt(myVector_squared)
}
}
return(absolute)
}
myAbs2(vec1)
#write function
myAbs2 <- function(myVector) {
for(i in length:myVector) {
myVector_squared <- myVector[i]^2
absolute <- sqrt(myVector_squared)
}
return(absolute)
}
myAbs2(vec1)
##2b) revise the above function to work on all elements of a vector
vec1 <- c(1.1, 2, 0, -4.3, 9, -12) #given vector to use new function on
#write function
myAbs2 <- function(myVector) {
for(i in length:myVector) {
myVector_squared <- myVector[i]^2
absolute <- sqrt(myVector_squared)
}
return(absolute)
}
myAbs2(vec1)
#write function
myAbsVector <- function(myVector) {
for(i in length:myVector) {
myVector_squared <- myVector[i]^2
absolute <- sqrt(myVector_squared)
}
return(absolute)
}
myAbsVector(vec1)
##2b) revise the above function to work on all elements of a vector
vec1 <- c(1.1, 2, 0, -4.3, 9, -12) #given vector to use new function on
str(vec)
str(vec1)
vec1 <- c(1.1, 2, 0, -4.3, 9, -12)
myAbsVector <- function(myVector) {
for( i in length:myVector) {
myVector_squared <- myVector[i]^2
absolute <- sqrt(myVector_squared)
}
return(absolute)
}
myAbsVector(vec1)
myAbsVector <- function(myVector) {
for( i in length:myVector) {
myVector_squared <- myVector[i-1]^2
absolute <- sqrt(myVector_squared)
}
return(absolute)
}
myAbsVector(vec1)
vec1 <- c(1.1, 2, 0, -4.3, 9, -12)
str(vec1)
myAbsVector <- function(myVector) {
for( i in 1:length:myVector ) {
myVector_squared <- myVector[i]^2
absolute <- sqrt(myVector_squared)
}
return(absolute)
}
myAbsVector(vec1)
myAbsVector <- function(myVector) {
for( i in 1:length(myVector)) {
myVector_squared <- myVector[i]^2
absolute <- sqrt(myVector_squared)
}
return(absolute)
}
myAbsVector(vec1)
str(myAbsVector)
myAbsVector <- function(myVector) {
for( i in 1:length(myVector)) {
myVector_squared <- myVector[i]^2
absolute <- sqrt(myVector_squared[i])
}
return(absolute)
}
myAbsVector(vec1)
myAbsVector <- function(myVector) {
for( i in 1:length(myVector)) {
myVector_squared <- myVector[i]^2
absolute <- sqrt(myVector_squared)
}
return(absolute)
}
myAbsVector(vec1)
myAbsVector <- function(myVector) {
for( i in 1:length(myVector)) {
absolute <- sqrt(myVector[i]^2)
}
return(absolute)
}
myAbsVector(vec1)
myAbsVector <- function(myVector) {
absolute <- sqrt(myVector[i]^2)
}
return(absolute)
}
myAbsVector <- function(myVector) {
absolute <- sqrt(myVector[i]^2)
return(absolute)
}
myAbsVector(vec1)
myAbsVector <- function(myVector[i]) {
absolute <- sqrt(myVector[i]^2)
return(absolute)
}
myAbsVector(vec1)
#write function
myAbsVector <- function(myVector) {
for(i in length:myVector) {
absolute <- sqrt(myVector[i]^2)
}
return(absolute)
}
myAbsVector(vec1)
#write function
myAbsVector <- function(myVector[]) {
for(i in length:myVector) {
absolute <- sqrt(myVector[i]^2)
}
return(absolute)
}
myAbsVector(vec1)
#write function
myAbsVector <- function(myVector) {
vec <- rep(0, length(myVector))
for(i in length:myVector) {
absolute <- sqrt(myVector[i]^2)
}
return(absolute)
}
myAbsVector(vec1)
#write function
myAbsVector <- function(myVector) {
vec <- rep(0:length(myVector))
for(i in length:myVector) {
absolute <- sqrt(myVector[i]^2)
}
return(absolute)
}
myAbsVector(vec1)
#write function
myAbsVector <- function(myVector) {
vec <- rep(0, length(myVector))
for(i in length:myVector) {
absolute <- sqrt(myVector[i]^2)
}
return(absolute)
}
myAbsVector(vec1)
##2b) revise the above function to work on all elements of a vector
vec1 <- c(1.1, 2, 0, -4.3, 9, -12) #given vector to use new function on
#write function
myAbsVector <- function(myVector) {
vec <- rep(0, length(myVector))
for(i in 1:length(myVector)) {
absolute <- sqrt(myVector[i]^2)
}
return(absolute)
}
myAbsVector(vec1)
##2b) revise the above function to work on all elements of a vector
vec1 <- c(1.1, 2, 0, -4.3, 9, -12) #given vector to use new function on
#write function
myAbsVector <- function(myVector) {
vec <- rep(0, length(myVector))
for(i in 1:length(myVector)) {
vec <- sqrt(myVector[i]^2)
}
return(absolute)
}
myAbsVector(vec1)
#write function
myAbsVector <- function(myVector) {
vec <- rep(0, length(myVector))
for(i in 1:length(myVector)) {
vec <- sqrt(myVector[i]^2)
}
return(vec)
}
myAbsVector(vec1)
myAbsVector <- function(myVector) {
absolute <- sqrt(myVector[i]^2)
return(absolute)
}
myAbsVector(vec1)
absolute <- sqrt(myVector)^2
#write function
myAbsVector <- function(length(myVector)) {
absolute <- sqrt(myVector)^2
return(absolute)
}
#write function
myAbsVector <- function(myVector) {
vec <- rep(0, length(myVector))
absolute <- sqrt(myVector)^2
return(absolute)
}
myAbsVector(vec1)
#write function
myAbsVector <- function(myVector) {
vec <- rep(0, length(myVector))
absolute <- sqrt(myVector^2)
return(absolute)
}
myAbsVector(vec1)
myAbsVector(vec1)
#write function
myAbsVector <- function(myVector) {
absolute <- sqrt(myVector^2)
return(absolute)
}
myAbsVector(vec1)
#write function
myAbsVector <- function(myVector) {
absolute <- sqrt(myVector^2)
return(absolute)
}
myAbsVector(vec1)
#write function
myAbsVector <- function(myVector) {
absolute <- sqrt(myVector^2)
return(absolute)
}
myAbsVector(vec1)
fibFunc <- function(n, startVal) {
fibVec <- rep(startVal, n)
for(i in startVal:length(fibVec)) {
fibVec[i] <- (fibVec[i-2] + fibVec[i-1])
}
return(fibVec)
}
fibFunc(30, 1)
fibFunc(30, 3)
fibFunc(3, 45)
fibFunc(30, 3)
fibFunc(30, 1)
fibFunc(30, 0)
