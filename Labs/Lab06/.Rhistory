#Lab 7 : "Put the FUN in FUNction!"
##Writing Your Own Functions, Part 1
#Problem 1: write a function to calculate and return the area of a triangle when given the base and height as arguments
#write function that will calculate the area of a triangle given the triangle's base and height
triangleArea <- function(base, height) {
area <- 0.5 * base * height
return(area)
}
#define base and height of imaginary triangle
base <- 10
height <- 9
#apply function from above to defined variables "base" and "height"
triangleArea(base, height)
#Problem 2: write a function to report absolute values of individual values, and then all elements of a vector
##2a) write function to report single absolute value of an element
myAbs <- function(x) {
x_sq <- x^2
absolute <- sqrt(x_sq)
return(absolute)
}
myAbs(-1.5) #check that the function works as intended with a test
##2b) revise the above function to work on all elements of a vector
vec1 <- c(1.1, 2, 0, -4.3, 9, -12) #given vector to use new function on
#write function that will report the absolute values of all elements in a vector
myAbsVector <- function(myVector) {
absolute <- sqrt(myVector^2)
return(absolute)
}
myAbsVector(vec1)
#Problem 3: Fibonacci Sequence -- return a vector of the first n Fibonacci numbers, where n is any integer greater than or equal to 3
fibFunc <- function(n, startVal) {
fibVec <- rep(startVal, n)
for(i in startVal:length(fibVec)) {
fibVec[i] <- (fibVec[i-2] + fibVec[i-1])
}
return(fibVec)
}
fibFunc(30, 0)
#from lab 4
fibVec <- rep(0, 20)
print(fibVec)
fibVec[2] <- 1
for(i in 3:length(fibVec)) {
fibVec[i] <- (fibVec[i-2] + fibVec[i-1])
}
squareDiff_Func <- function(x, y) {
Diff <- (x - y)
sqDiff <- (Diff ^2)
return(sqDiff)
}
## demonstrate function viability on the numbers 3 and 5
squareDiff_Func(3, 5)
3 - 5
-2^2
(-2)^2
## call squareDiff_Func with a vector as the first argument
squareDiff_Func(c(2, 4, 6), 4)
##function
meanFunc <- function(myVector) {
meanVector <- (sum(myVector) / length(myVector))
}
## show that function works with a vector
meanFunc(c(5, 15, 10))
## show that function works with a vector
print(meanFunc(c(5, 15, 10)))
print(meanFunc(c(12, 57, 22, 198)))
## show that function works with a vector
print(meanFunc(c(5, 15, 10)))
##demonstrate function use with provided dataset ("DataForLab07.csv")
data <- read.csv(file.choose())
##demonstrate function use with provided dataset ("DataForLab07.csv")
data <- read.csv(file.choose())
##demonstrate function use with provided dataset ("DataForLab07.csv")
dataLab07 <- read.csv(file.choose())  #modify this -- some difficulty dealing with Google Drive directory, since 'Google Drive' has a space in it. Will resolve somehow
str(dataLab07)
head(dataLab07)
str(dataLab07)
head(dataLab07)
###make variable 'x' from dataframe recognizable as a vector to R
Lab07_Vector <- as.vector(dataLab07$x)
head Lab07_Vector
str(Lab07_Vector)
###call meanFunc() function to calculate mean of Lab07_Vector
meanFunc(Lab07_Vector)
###call meanFunc() function to calculate mean of Lab07_Vector
print(meanFunc(Lab07_Vector))
##4c) sum of squares function
sosFunc <- function(myVector) {
mean <- meanFunc(myVector) #calculates the mean of the values in the given vector
sqDiffs <- squareDiff_Func(myVector[i], mean) #subtracts the vector mean from each datapoint in the vector, and squares each of those values
sos <- sum(sqDiffs)
return(sos)
}
sosFunc(Lab07_Vector)
##4c) sum of squares function
sosFunc <- function(myVector) {
mean <- meanFunc(myVector) #calculates the mean of the values in the given vector
sqDiffs <- squareDiff_Func(myVector, mean) #subtracts the vector mean from each datapoint in the vector, and squares each of those values
sos <- sum(sqDiffs)
return(sos)
}
sosFunc(Lab07_Vector)
##demonstrate function use with provided dataset ("DataForLab07.csv")
###import dataset and explore how the data are organized
dataLab07 <- read.csv("C:\Users\kevin\Google Drive\GraduateSchool_EBIO\Coursework\SPRING_2020\Computational_Biology\CompBioLabsAndHomework\Labs\Lab07\DataForLab07.csv")  #NOTE TO SELF: modify this method -- some difficulty dealing with Google Drive directory, since 'Google Drive' has a space in it. Will resolve somehow
##demonstrate function use with provided dataset ("DataForLab07.csv")
###import dataset and explore how the data are organized
dataLab07 <- read.csv("C\Users\kevin\Google Drive\GraduateSchool_EBIO\Coursework\SPRING_2020\Computational_Biology\CompBioLabsAndHomework\Labs\Lab07\DataForLab07.csv")  #NOTE TO SELF: modify this method -- some difficulty dealing with Google Drive directory, since 'Google Drive' has a space in it. Will resolve somehow
##demonstrate function use with provided dataset ("DataForLab07.csv")
###import dataset and explore how the data are organized
dataLab07 <- read.csv("c:\users\kevin\Google Drive\GraduateSchool_EBIO\Coursework\SPRING_2020\Computational_Biology\CompBioLabsAndHomework\Labs\Lab07\DataForLab07.csv")  #NOTE TO SELF: modify this method -- some difficulty dealing with Google Drive directory, since 'Google Drive' has a space in it. Will resolve somehow
##demonstrate function use with provided dataset ("DataForLab07.csv")
###import dataset and explore how the data are organized
dataLab07 <- read.csv("c:/users/kevin/Google Drive/GraduateSchool_EBIO/Coursework/SPRING_2020/Computational_Biology/CompBioLabsAndHomework/Labs/Lab07/DataForLab07.csv")  #NOTE TO SELF: modify this method -- some difficulty dealing with Google Drive directory, since 'Google Drive' has a space in it. Will resolve somehow
##demonstrate function use with provided dataset ("DataForLab07.csv")
###import dataset and explore how the data are organized
dataLab07 <- read.csv("c:/users/kevin/Google Drive/GraduateSchool_EBIO/Coursework/SPRING_2020/Computational_Biology/CompBioLabsAndHomework/Labs/Lab07/DataForLab07.csv")
str(dataLab07)
head(dataLab07)
###make variable 'x' from dataframe recognizable as a vector to R
Lab07_Vector <- as.vector(dataLab07$x)
str(Lab07_Vector) #check that this worked with str() function
###call meanFunc() function to calculate mean of Lab07_Vector
print(meanFunc(Lab07_Vector))
##4c) sum of squares function
sosFunc <- function(myVector) {
mean <- meanFunc(myVector) #calculates the mean of the values in the given vector
sqDiffs <- squareDiff_Func(myVector, mean) #subtracts the vector mean from each datapoint in the vector, and squares each of those values
sos <- sum(sqDiffs) #takes the sum of all the squared differences output from the previous line
return(sos)
}
###test function on Lab07 dataset
sosFunc(Lab07_Vector)
#1) Create variable x, and if-else statement to check if value is larger than 5
x <- 10
##Part 1:
#1) Create variable x, and if-else statement to check if value is larger than 5
x <- 10
if(x > 5) {
print("variable x is greater than 5")
} else {
print("variable x is less than 5")
}
#####################
#2) Import ExampleData.csv file
ExampleData <- read.csv("c:/users/kevin/Google Drive/GraduateSchool_EBIO/Coursework/SPRING_2020/Computational_Biology/CompBioLabsAndHomework/Labs/Lab05/ExampleData.csv") #import with fixed filepath (rather than file.choose()) for reproducibility
str(ExampleData) #check structure of data -- data frame of one variable
DataVector <- ExampleData$x #move data into a vector for manipulation
##2a) create a for loop to change every negative value in the DataVector to NA
for(i in 1:length(DataVector)) {
if(DataVector[i] >= 0) {
print(DataVector[i])
} else {
DataVector[i] <- NA
}
}
##2b) change all "NA" values from 2a to "NaN"
DataVector[is.na(DataVector)] <- NaN
##2c) determine how many values in imported data fall between 50 and 100 (inclusive of 50 and 100)
DataVector[is.nan(DataVector)] <- 0
##2d) determine how many values in DataVector fall between 50 and 100
vals50to100 <- which(DataVector >= 50, DataVector <= 100)
##2e) create new vector of those values (50-100) from 2d
FiftyToOneHundred <- DataVector[vals50to100]
FiftyToOneHundred
##2f) create a .csv file of the above vector FiftyToOneHundred
write.csv(x = FiftyToOneHundred, file = "FiftyToOneHundred.csv")
#################
#3) Import data on CO2 emmisions, and read about the dataset to answer question 3
CO2data <- read.csv(file.choose())
head(CO2data)
##3a) find the first year that "Gas" emmisions were non-zero
gasVector <- CO2data$Gas
which(gasVector > 0) #list indices in gasVector which correspond to non-zero (greater than zero) values in order
CO2data[135,] #the first non-zero value from the which() function above was the 135th value, which corresponds to the 135th row in the "CO2data" dataframe
####answer: 1885
##3b) report the years in which "Total" emmisions were between 200 and 300 million metric tons of carbon
head(CO2data)
Total <- CO2data[["Total"]]
totalSubset <- which(CO2data$Total >= 200, CO2data$Total <= 300)
length(totalSubset) #double check that this isn't the entire dataset -- it was incorrect during a previous iteration of code
totalSubset #print the vector indices that correspond to the "Total" values between 200 and 300
yearSubset <- CO2data$Year[129:263] #make a vector of "Year" rows 129-263
length(yearSubset) #check length
head(yearSubset) #look at first values to get earliest year in which "Total" was between 200 and 300
tail(yearSubset) #look at last set of values to get latest year in which "Total" was between 200 and 300
####answer: total emmisions were between 200 and 300 million metric tons of carbon between the years 1879 and 2013.
##PART 2:
#Lotka-Volterra predator-prey model
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
#Goal: calculate abundances of predators and prey over time using this model
#1)
##define parameter values (copied from Sam's Github lab handout)
totalGenerations <- 1000
initPrey <- 100 	# initial prey abundance at time t = 1
initPred <- 10		# initial predator abundance at time t = 1
a <- 0.01 		# attack rate
r <- 0.2 		# growth rate of prey
m <- 0.05 		# mortality rate of predators
k <- 0.1 		# conversion constant of prey into predators
#2)
##create time vector and make two additional vectors for storage of results
t <- seq(1, totalGenerations) #time vector
##Part 1:
#1) Create variable x, and if-else statement to check if value is larger than 5
x <- 10
if(x > 5) {
print("variable x is greater than 5")
} else {
print("variable x is less than 5")
}
#####################
#2) Import ExampleData.csv file
ExampleData <- read.csv("c:/users/kevin/Google Drive/GraduateSchool_EBIO/Coursework/SPRING_2020/Computational_Biology/CompBioLabsAndHomework/Labs/Lab05/ExampleData.csv") #import with fixed filepath (rather than file.choose()) for reproducibility
str(ExampleData) #check structure of data -- data frame of one variable
DataVector <- ExampleData$x #move data into a vector for manipulation
##2a) create a for loop to change every negative value in the DataVector to NA
for(i in 1:length(DataVector)) {
if(DataVector[i] >= 0) {
print(DataVector[i])
} else {
DataVector[i] <- NA
}
}
##2b) change all "NA" values from 2a to "NaN"
DataVector[is.na(DataVector)] <- NaN
##2c) determine how many values in imported data fall between 50 and 100 (inclusive of 50 and 100)
DataVector[is.nan(DataVector)] <- 0
##2d) determine how many values in DataVector fall between 50 and 100
vals50to100 <- which(DataVector >= 50, DataVector <= 100)
##2e) create new vector of those values (50-100) from 2d
FiftyToOneHundred <- DataVector[vals50to100]
FiftyToOneHundred
##2f) create a .csv file of the above vector FiftyToOneHundred
write.csv(x = FiftyToOneHundred, file = "FiftyToOneHundred.csv")
#################
#3) Import data on CO2 emmisions, and read about the dataset to answer question 3
CO2data <- read.csv("c:/users/kevin/Google Drive/GraduateSchool_EBIO/Coursework/SPRING_2020/Computational_Biology/CompBioLabsAndHomework/Labs/Lab05/CO2_data_cut_paste.csv")
head(CO2data)
##3a) find the first year that "Gas" emmisions were non-zero
gasVector <- CO2data$Gas
which(gasVector > 0) #list indices in gasVector which correspond to non-zero (greater than zero) values in order
CO2data[135,] #the first non-zero value from the which() function above was the 135th value, which corresponds to the 135th row in the "CO2data" dataframe
####answer: 1885
##3b) report the years in which "Total" emmisions were between 200 and 300 million metric tons of carbon
head(CO2data)
Total <- CO2data[["Total"]]
totalSubset <- which(CO2data$Total >= 200, CO2data$Total <= 300)
length(totalSubset) #double check that this isn't the entire dataset -- it was incorrect during a previous iteration of code
totalSubset #print the vector indices that correspond to the "Total" values between 200 and 300
yearSubset <- CO2data$Year[129:263] #make a vector of "Year" rows 129-263
length(yearSubset) #check length
head(yearSubset) #look at first values to get earliest year in which "Total" was between 200 and 300
tail(yearSubset) #look at last set of values to get latest year in which "Total" was between 200 and 300
####answer: total emmisions were between 200 and 300 million metric tons of carbon between the years 1879 and 2013.
##PART 2:
#Lotka-Volterra predator-prey model
n[t] <- n[t-1] + (r * n[t-1]) - (a * n[t-1] * p[t-1])
p[t] <- p[t-1] + (k * a * n[t-1] * p[t-1]) - (m * p[t-1])
#Goal: calculate abundances of predators and prey over time using this model
#1)
##define parameter values (copied from Sam's Github lab handout)
totalGenerations <- 1000
initPrey <- 100 	# initial prey abundance at time t = 1
initPred <- 10		# initial predator abundance at time t = 1
a <- 0.01 		# attack rate
r <- 0.2 		# growth rate of prey
m <- 0.05 		# mortality rate of predators
k <- 0.1 		# conversion constant of prey into predators
#2)
##create time vector and make two additional vectors for storage of results
t <- seq(1, totalGenerations) #time vector
#2)
##create time vector and make two additional vectors for storage of results
t <- seq(1, totalGenerations) #time vector
nt <- seq(1, totalGenerations) #storage vector of prey abundance values over time
pt <- seq(1, totalGenerations) #storage vector of predator abundance values over time
##implement calculations with a loop
for(i in totalGenerations) {
nt[i] <- initPrey[t - 1] + (r * initPrey[t - 1]) - (a * initPrey[t - 1] * initPred[t - 1])
pt[i] <- initPred[t - 1] + (k * a * initPrey[t - 1] * initPred[t - 1]) - (m * initPred[t - 1])
}
#setup storage vectors
time <- seq(1,12)
